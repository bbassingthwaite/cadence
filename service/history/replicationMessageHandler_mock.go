// The MIT License (MIT)
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: replicationMessageHandler.go

// Package history is a generated GoMock package.
package history

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	replicator "github.com/uber/cadence/.gen/go/replicator"
)

// MockreplicationMessageHandler is a mock of replicationMessageHandler interface
type MockreplicationMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockreplicationMessageHandlerMockRecorder
}

// MockreplicationMessageHandlerMockRecorder is the mock recorder for MockreplicationMessageHandler
type MockreplicationMessageHandlerMockRecorder struct {
	mock *MockreplicationMessageHandler
}

// NewMockreplicationMessageHandler creates a new mock instance
func NewMockreplicationMessageHandler(ctrl *gomock.Controller) *MockreplicationMessageHandler {
	mock := &MockreplicationMessageHandler{ctrl: ctrl}
	mock.recorder = &MockreplicationMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockreplicationMessageHandler) EXPECT() *MockreplicationMessageHandlerMockRecorder {
	return m.recorder
}

// readMessages mocks base method
func (m *MockreplicationMessageHandler) readMessages(ctx context.Context, sourceCluster string, lastMessageID int64, pageSize int, pageToken []byte) ([]*replicator.ReplicationTask, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "readMessages", ctx, sourceCluster, lastMessageID, pageSize, pageToken)
	ret0, _ := ret[0].([]*replicator.ReplicationTask)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// readMessages indicates an expected call of readMessages
func (mr *MockreplicationMessageHandlerMockRecorder) readMessages(ctx, sourceCluster, lastMessageID, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "readMessages", reflect.TypeOf((*MockreplicationMessageHandler)(nil).readMessages), ctx, sourceCluster, lastMessageID, pageSize, pageToken)
}

// purgeMessages mocks base method
func (m *MockreplicationMessageHandler) purgeMessages(sourceCluster string, lastMessageID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "purgeMessages", sourceCluster, lastMessageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// purgeMessages indicates an expected call of purgeMessages
func (mr *MockreplicationMessageHandlerMockRecorder) purgeMessages(sourceCluster, lastMessageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "purgeMessages", reflect.TypeOf((*MockreplicationMessageHandler)(nil).purgeMessages), sourceCluster, lastMessageID)
}

// mergeMessages mocks base method
func (m *MockreplicationMessageHandler) mergeMessages(ctx context.Context, sourceCluster string, lastMessageID int64, pageSize int, pageToken []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "mergeMessages", ctx, sourceCluster, lastMessageID, pageSize, pageToken)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// mergeMessages indicates an expected call of mergeMessages
func (mr *MockreplicationMessageHandlerMockRecorder) mergeMessages(ctx, sourceCluster, lastMessageID, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mergeMessages", reflect.TypeOf((*MockreplicationMessageHandler)(nil).mergeMessages), ctx, sourceCluster, lastMessageID, pageSize, pageToken)
}
